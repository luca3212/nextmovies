import React, { useState, useEffect, useContext } from "react";
import {
  Cast,
  DataPage,
  Recomendacion,
  Videos,
  dataTrailer,
} from "../../types/movie";
import { GetServerSideProps } from "next";
import Layout from "../../components/layout";
import styles from "../../styles/pageMovie.module.scss";
import Head from "next/head";
import Image from "next/image";
import { duracionPeli, nameGeneroType, trailerMovie } from "../../hooks/utils";
import Time from "../../components/icons/time";
import Date from "../../components/icons/date";
import Star from "../../components/icons/star";
import Like from "../../components/icons/like";
import FavFalse from "../../components/icons/favFalse";

import { MovieSmall } from "../../types/movie";

import {
  FavoritoContext,
  TareasFavoritos,
} from "../../contexts/ListaFavoritos";
import Play from "../../components/icons/play";
import Listas from "../../components/listas";
import VideoList from "../../components/YouTubeVideo";
import Spinner from "../../components/spinner";
import ImagenNo from "../../components/icons/imagenNo";
import FotoNo from "../../components/icons/fotoNo";

type PageProps = {
  detallesMovie: DataPage;
  recomendaciones: Recomendacion[];
  videos: Videos[];
  linkMovie: string;
};

type MovieProviders = {
  results: {
    AR?: {
      link?: string;
    };
  };
};

export default function Page({
  detallesMovie,
  recomendaciones,
  videos,
  linkMovie,
}: PageProps) {
  const { setListaFavoritos, idFavorito, addFavorito, deleteFavorito } =
    useContext(FavoritoContext) as TareasFavoritos;

  const listaRecomendadas: MovieSmall[] = recomendaciones.map((movie) => {
    return {
      id: movie.id,
      title: movie.title,
      poster_path: movie.poster_path,
      overview: movie.overview,
      release_date: movie.release_date,
      backdrop_path: movie.backdrop_path,
    };
  });

  const [isFavorita, setIsFavorita] = useState<boolean>(false);
  const [trailers, setTrailers] = useState<dataTrailer[] | null>(
    trailerMovie(videos)
  );

  const [loading, setLoading] = useState(true);

  const handleLoadingComplete = () => {
    setLoading(false);
  };

  const [listActors, setListActors] = useState<Cast[]>(
    detallesMovie.credits.cast.slice(0, 5)
  );

  useEffect(() => {
    const lista = localStorage.getItem("miLista");
    const miLista = lista ? JSON.parse(lista) : [];
    setListaFavoritos(miLista);

    setIsFavorita(idFavorito(detallesMovie.id));
    setListActors(detallesMovie.credits.cast.slice(0, 5));

    setTrailers(trailerMovie(videos));

    setLoading(detallesMovie.poster_path != null ? true : false);
  }, [detallesMovie]);

  const handleFavorito = () => {
    if (isFavorita) {
      deleteFavorito(detallesMovie.id);
      setIsFavorita(false);
    } else {
      const guardarMovie: MovieSmall = {
        id: detallesMovie.id,
        title: detallesMovie.title,
        poster_path: detallesMovie.poster_path,
        overview: detallesMovie.overview,
        release_date: detallesMovie.release_date,
        runtime: detallesMovie.runtime,
        backdrop_path: detallesMovie.backdrop_path,
      };
      addFavorito(guardarMovie);
      setIsFavorita(true);
    }
  };

  return (
    <>
      <Head>
        <title>NextMovies</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading && <Spinner />}
      <Layout>
        <div className={styles.containPage}>
          <div className={styles.imagenPortada}>
            {detallesMovie.backdrop_path != null && (
              <Image
                key={detallesMovie.id}
                className={styles.imagenFondo}
                alt="imagen Portada"
                src={`https://image.tmdb.org/t/p/original${detallesMovie.backdrop_path}`}
                fill
                quality={70}
                priority
              />
            )}
          </div>

          <div className={styles.containCenter}>
            <div className={styles.headPage}>
              <div className={styles.containImagen}>
                {detallesMovie.poster_path != null ? (
                  <Image
                    key={detallesMovie.id}
                    className={styles.imagenFondo}
                    alt="imagen Portada"
                    src={`https://image.tmdb.org/t/p/original${detallesMovie.poster_path}`}
                    width={200}
                    height={300}
                    quality={85}
                    priority
                    onLoadingComplete={handleLoadingComplete}
                  />
                ) : (
                  <ImagenNo />
                )}
              </div>

              <div className={styles.infoPeli}>
                <h1>{detallesMovie.title}</h1>
                <div className={styles.containGenero}>
                  <p>{nameGeneroType(detallesMovie.genres)}</p>
                </div>

                <div className={styles.containData}>
                  <div className={styles.infoMovie}>
                    <Star /> <p>{detallesMovie.vote_average.toFixed(1)}/10</p>
                  </div>
                  <div className={styles.infoMovie}>
                    <Date /> <p>{detallesMovie.release_date.slice(0, 4)}</p>
                  </div>
                  <div className={styles.infoMovie}>
                    <Time /> <p>{duracionPeli(detallesMovie.runtime)}</p>
                  </div>
                </div>

                <div className={styles.containBton}>
                  {linkMovie && (
                    <a
                      className={styles.btonInicio}
                      href={linkMovie}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <Play />
                      <p>Donde ver</p>
                    </a>
                  )}
                  <button
                    onClick={handleFavorito}
                    className={styles.btonInicio}
                    style={{ background: "#1a1a1a", color: "#f3f3f3" }}
                  >
                    {isFavorita ? <Like /> : <FavFalse />} <p>Mi lista</p>
                  </button>
                </div>
              </div>
            </div>

            <div className={styles.bodyPage}>
              <div className={styles.containDescripcion}>
                <h3>Descripcion</h3>
                <p>
                  {detallesMovie.overview
                    ? detallesMovie.overview
                    : "No se encontró descripción para esta película."}
                </p>
              </div>
              <div className={styles.containIntegrantes}>
                <h3>Elenco</h3>
                <ul className={styles.listaActores}>
                  {listActors.map((actor, index) => {
                    return (
                      <li key={index}>
                        {actor.profile_path != null ? (
                          <Image
                            key={actor.id}
                            alt="Foto actor"
                            src={`https://image.tmdb.org/t/p/original${actor.profile_path}`}
                            priority
                            width={64}
                            height={96}
                            quality={85}
                          />
                        ) : (
                          <FotoNo />
                        )}
                        <h4>{actor.name}</h4>
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>

            {/* evitando error cross */}
            <div className={styles.containTrailers}>
              {trailers != null &&
                trailers.map((video, index) => (
                  <VideoList
                    key={index}
                    videoKey={video.keyVideo}
                    title={video.title}
                  />
                ))}
            </div>
          </div>

          {listaRecomendadas.length != 0 && (
            <Listas moviesLista={listaRecomendadas} titleSeccion="Similares" />
          )}
        </div>
      </Layout>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const id = context.params?.id;

  //nueva fetch con data completa (similares, creditos. videos, provider)
  const detallesMovieResponse = await fetch(
    `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.key_api}&language=es&append_to_response=similar%2Ccredits%2Cvideos`
  );

  const providers = await fetch(
    `https://api.themoviedb.org/3/movie/${id}/watch/providers?api_key=${process.env.key_api}`
  );

  const detallesMovie = await detallesMovieResponse.json();

  const providersMovie: MovieProviders = await providers.json();

  const link = providersMovie.results?.AR?.link;

  const recomendaciones: Recomendacion[] = detallesMovie.similar.results;
  const videos: Videos[] = detallesMovie.videos.results;

  return {
    props: { detallesMovie, recomendaciones, videos, linkMovie: link || null },
  };
};
